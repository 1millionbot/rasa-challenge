from rasa_sdk import Action, Tracker
from rasa_sdk.executor import CollectingDispatcher
from rasa_sdk.events import SlotSet, FollowupAction, ActiveLoop
from typing import Any, Text, Dict, List
from datetime import datetime
from rasa_sdk.forms import FormValidationAction
from .utils import chunk_buttons


class ActionButtonsST(Action):
    def name(self) -> str:
        return "action_gva_smart_tourism"

    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain):
        buttons = [
            {"title": "Visualizaciones Gen√©ricas", "payload": "/gva_visualizaciones_genericas"},
            {"title": "Casos de uso", "payload": "/gva_casos_uso"},
            {"title": "Soluciones IA y Anal√≠tica avanzada", "payload": "/gva_modelos_IA"},
            {"title": "Informes", "payload": "/gva_informes"},
            {"title": "Smart Academy", "payload": "/gva_smart_academy"},
            {"title": "Notas Metodol√≥gicas", "payload": "/gva_notas_metodologicas"},
        ]
        message = {
            "type": "button-carousel-template",
            "payload": {
                "template_type": "generic",
                "elements": [
                    {"buttons": group} for group in chunk_buttons(buttons, 3)
                ]
            }
        }
        
        dispatcher.utter_message(text="Smart Tourism es una plataforma donde encontrar informaci√≥n sobre **Inteligencia Tur√≠stica** en la Comunitat Valenciana. \n\n Puedes explorar el portal o pulsar estos botones para **saber m√°s**:", attachment=message)
        return []


class ActionButtonsVD(Action):
    def name(self) -> str:
        return "action_gva_visualizaciones_dinamicas"

    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain):
        buttons = [
            {"title": "Visualizaciones gen√©ricas", "payload": "/gva_visualizaciones_genericas"},
            {"title": "Casos de uso", "payload": "/gva_casos_uso"},
            {"title": "Soluciones IA y Anal√≠tica avanzada", "payload": "/gva_modelos_IA"},
        ]
        message = {
            "type": "button-carousel-template",
            "payload": {
                "template_type": "generic",
                "elements": [
                    {"buttons": group} for group in chunk_buttons(buttons, 3)
                ]
            }
        }
        
        dispatcher.utter_message(text="Las **Visualizaciones din√°micas** son √∫tiles para **explorar** y **analizar** interactivamente los datos en forma de gr√°ficas. \n\n ü§ìüí° Adem√°s, puedes filtrarlas y **personalizarlas** seg√∫n tus necesidades. \n\n ¬øTe gustar√≠a que te diera **m√°s informaci√≥n** sobre alguna de ellas?", attachment=message)
        return []


class ActionButtonsVG(Action):
    def name(self) -> str:
        return "action_gva_visualizaciones_genericas"

    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain):
        buttons = [
            {"title": "Comportamiento tur√≠stico", "payload": "/gva_VG_comportamiento_turismo"},
            {"title": "Alojamientos", "payload": "/gva_VG_alojamientos"},
            {"title": "Vuelos", "payload": "/gva_VG_vuelos"},
            {"title": "Presencia y movilidad", "payload": "/gva_VG_presencia_movilidad"},
        ]
        message = {
            "type": "button-carousel-template",
            "payload": {
                "template_type": "generic",
                "elements": [
                    {"buttons": group} for group in chunk_buttons(buttons, 4)
                ]
            }
        }
        
        dispatcher.utter_message(text="Las **Visualizaciones Gen√©ricas** üìä son gr√°ficos interactivos que te permiten examinar una gran variedad de datos de forma **sencilla** y **exhaustiva**. \n\n ¬øTe gustar√≠a saber m√°s sobre alguno de los temas que tratan? ü§î", attachment=message)
        return []

class ActionButtonsCUS(Action):
    def name(self) -> str:
        return "action_gva_casos_uso"

    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain):
        buttons = [
            {"title": "Poblaci√≥n flotante y densidad", "payload": "/gva_CUS_poblacion_flotante"},
            {"title": "Programaci√≥n y negociaci√≥n", "payload": "/gva_CUS_programacion_aerolineas"},
            {"title": "Marketing a√©reo", "payload": "/gva_CUS_marketing_aereo"},
        ]
        message = {
            "type": "button-carousel-template",
            "payload": {
                "template_type": "generic",
                "elements": [
                    {"buttons": group} for group in chunk_buttons(buttons, 3)
                ]
            }
        }
        
        dispatcher.utter_message(text="Los **Casos de uso** ‚öôÔ∏è son ejemplos pr√°cticos de c√≥mo aplicar los datos y los an√°lisis de la plataforma a **situaciones reales**. \n\n ¬øTe interesa alguno de los que est√°n **disponibles en la plataforma**?", attachment=message)
        return []


class ActionButtonsCTVG(Action):
    def name(self) -> str:
        return "action_gva_VG_comportamiento_turismo"

    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain):
        buttons = [
            {"title": "Internacional", "payload": "/gva_VG_CT_turismo_internacional"},
            {"title": "Nacional", "payload": "/gva_VG_CT_turismo_nacional"},
        ]
        message = {
            "type": "button-carousel-template",
            "payload": {
                "template_type": "generic",
                "elements": [
                    {"buttons": group} for group in chunk_buttons(buttons, 2)
                ]
            }
        }
        
        dispatcher.utter_message(text="Las visualizaciones de üåç **Comportamiento del turismo** desglosan datos sobre diversos aspectos tur√≠sticos:  \n ‚ñ´Ô∏è El **n√∫mero** de turistas  \n ‚ñ´Ô∏è El **perfil** del turista o las **caracter√≠sticas** del viaje  \n ‚ñ´Ô∏è El **gasto** tur√≠stico  \n\n ¬øPrefieres profundizar en el **turismo nacional** o en el **internacional**?", attachment=message)
        return []


class ActionButtonsALOJ(Action):
    def name(self) -> str:
        return "action_gva_VG_alojamientos"

    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain):
        buttons = [
            {"title": "Todos los alojamientos", "payload": "/gva_VG_ALOJ_todos"},
            {"title": "Hoteles, apartamentos y campings", "payload": "/gva_VG_ALOJ_especificos"},
            {"title": "Alojamientos rurales", "payload": "/gva_VG_ALOJ_rurales"},
        ]
        message = {
            "type": "button-carousel-template",
            "payload": {
                "template_type": "generic",
                "elements": [
                    {"buttons": group} for group in chunk_buttons(buttons, 3)
                ]
            }
        }
        
        dispatcher.utter_message(text="En la secci√≥n de **alojamientos** üè† encontrar√°s datos evolutivos y comparativos sobre **todo tipo de hospedajes.** \n\n El apartado de **demanda** explora:  \n ‚ñ´Ô∏è El n√∫mero de viajeros  \n ‚ñ´Ô∏è Las pernoctaciones  \n ‚ñ´Ô∏è La estancia media \n\n El de **oferta** muestra:  \n ‚ñ´Ô∏è La cantidad de establecimientos  \n ‚ñ´Ô∏è El n√∫mero de plazas  \n ‚ñ´Ô∏è El grado de ocupaci√≥n  \n ‚ñ´Ô∏è El personal empleado", attachment=message)
        return []

class ActionButtonsVG_PM(Action):
    def name(self) -> str:
        return "action_gva_VG_presencia_movilidad"

    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain):
        buttons = [
            {"title": "Estancia diurna", "payload": "/gva_VG_PM_estancia_diurna"},
            {"title": "Estancia nocturna", "payload": "/gva_VG_PM_estancia_nocturna"},
            {"title": "Llegadas y salidas", "payload": "/gva_VG_PM_llegadas_salidas"},
            {"title": "Movilidad diurna y nocturna", "payload": "/gva_VG_PM_movilidad"},
            {"title": "Turistas, pernoctaciones y estancia media", "payload": "/gva_VG_PM_presencia"},
            
        ]
        message = {
            "type": "button-carousel-template",
            "payload": {
                "template_type": "generic",
                "elements": [
                    {"buttons": group} for group in chunk_buttons(buttons, 3)
                ]
            }
        }
        
        dispatcher.utter_message(text="En el apartado de visualizaciones de **presencia y movilidad** podr√°s encontrar toda la informaci√≥n sobre diversos aspectos tur√≠sticos esenciales a nivel de:  \n ‚ñ´Ô∏è Turismo **receptor**  \n ‚ñ´Ô∏è Turismo **interprovincial**  \n ‚ñ´Ô∏è Turismo **intraprovincial**  \n\n ¬øQu√© tema te interesa m√°s? ü§î", attachment=message)
        return []
   

       
class ActionButtonsMIA(Action):
    def name(self) -> str:
        return "action_gva_modelos_IA"

    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain):
        buttons = [
            {"title": "Oportunidad en marketing", "payload": "/gva_MIA_ventana_oportunidad"},
            {"title": "Previsi√≥n de visitantes", "payload": "/gva_MIA_predict_estancia_diurna"},
            {"title": "Influencia clim√°tica", "payload": "/gva_MIA_factor_climatico"},
            {"title": "Tendencia de viajes nacionales", "payload": "/gva_MIA_predict_viajes_nacionales"},
            {"title": "Patrones de comportamiento", "payload": "/gva_MIA_patrones_comportamiento"},
            # {"title": "Relaci√≥n de factores clave", "payload": "/gva_MIA_factores_clave"},
        ]
        message = {
            "type": "button-carousel-template",
            "payload": {
                "template_type": "generic",
                "elements": [
                    {"buttons": group} for group in chunk_buttons(buttons, 3)
                ]
            }
        }
        dispatcher.utter_message(text="Las **Soluciones IA y Anal√≠tica avanzada** ü§ñ son herramientas que utilizan **modelos predictivos avanzados** basados inteligencia artificial para analizar datos y hacer previsiones tur√≠sticas. \n\n Haz clic sobre el tema que te interese para **profundizar** en √©l.", attachment=message)
        return []



class ActionButtonsIntro(Action):
    def name(self) -> str:
        return "action_gva_intro"

    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain):
        buttons = [
            {"title": "Visualizaciones Gen√©ricas", "payload": "/gva_visualizaciones_genericas"},
            {"title": "Casos de uso", "payload": "/gva_casos_uso"},
            {"title": "Soluciones IA y Anal√≠tica avanzada", "payload": "/gva_modelos_IA"},
            {"title": "Informes", "payload": "/gva_informes"},
            {"title": "Smart Academy", "payload": "/gva_smart_academy"},
            {"title": "Notas Metodol√≥gicas", "payload": "/gva_notas_metodologicas"},
        ]
        message = {
            "type": "button-carousel-template",
            "payload": {
                "template_type": "generic",
                "elements": [
                    {"buttons": group} for group in chunk_buttons(buttons, 3)
                ]
            }
        }
        
        dispatcher.utter_message(text="Para indagar en el **turismo en la Comunitat Valenciana** y los datos que ofrece la **plataforma**, puedes: \n\n ‚ñ´Ô∏è **Inspeccionar** el portal libremente  \n ‚ñ´Ô∏è Pulsar cualquiera de estos **botones** para centrarte en un **aspecto concreto**", attachment=message)
        return []


class ActionButtonsVuelos(Action):
    def name(self) -> str:
        return "action_gva_vuelos"

    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain):
        buttons = [
            {"title": "Visualizaciones Gen√©ricas", "payload": "/gva_VG_vuelos"},
            {"title": "Soluciones IA", "payload": "/gva_MIA_vuelos"}
        ]
        message = {
            "type": "button-carousel-template",
            "payload": {
                "template_type": "generic",
                "elements": [
                    {"buttons": group} for group in chunk_buttons(buttons, 3)
                ]
            }
        }
        
        dispatcher.utter_message(text="Sobre **vuelos**, la plataforma ofrece informaci√≥n en forma de:  \n ‚ñ´Ô∏è **Visualizaciones gen√©ricas**: representaciones gr√°ficas de los datos disponibles  \n ‚ñ´Ô∏è **Soluciones IA y anal√≠tica avanzada**: predicciones a futuro y representaciones complejas \n\n ¬øCu√°l de ellas te interesa m√°s? ü§î", attachment=message)
        return []


class ActionButtonsPM(Action):
    def name(self) -> str:
        return "action_gva_presencia_movilidad"

    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain):
        buttons = [
            {"title": "Visualizaciones Gen√©ricas", "payload": "/gva_VG_presencia_movilidad"},
            {"title": "Soluciones IA", "payload": "/gva_MIA_presencia_movilidad"}
        ]
        message = {
            "type": "button-carousel-template",
            "payload": {
                "template_type": "generic",
                "elements": [
                    {"buttons": group} for group in chunk_buttons(buttons, 3)
                ]
            }
        }
        
        dispatcher.utter_message(text="Los datos sobre **presencia y movilidad** pueden consultarse como:  \n ‚ñ´Ô∏è **Visualizaciones gen√©ricas**: representaciones gr√°ficas de los datos disponibles  \n ‚ñ´Ô∏è **Soluciones IA y anal√≠tica avanzada**: predicciones a futuro y representaciones complejas \n\n üí¨ Pulsa el **bot√≥n** que prefieras para continuar", attachment=message)
        return []
    
    
class ActionButtonsCTgeneral(Action):
    def name(self) -> str:
        return "action_gva_comportamiento_turismo"

    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain):
        buttons = [
            {"title": "Visualizaciones Gen√©ricas", "payload": "/gva_VG_comportamiento_turismo"},
            {"title": "Soluciones IA", "payload": "/gva_MIA_comportamiento_turismo"}
        ]
        message = {
            "type": "button-carousel-template",
            "payload": {
                "template_type": "generic",
                "elements": [
                    {"buttons": group} for group in chunk_buttons(buttons, 3)
                ]
            }
        }
        
        dispatcher.utter_message(text="El **comportamiento del turismo** se analiza en el portal desde dos perspectivas:  \n ‚ñ´Ô∏è **Visualizaciones gen√©ricas**: representaciones gr√°ficas de los datos disponibles  \n ‚ñ´Ô∏è **Soluciones IA y anal√≠tica avanzada**: predicciones a futuro y representaciones complejas \n\n üôÇ Escoge el **bot√≥n** que m√°s interese.", attachment=message)
        return []

    class ActionButtonsMIAvuelos(Action):
        def name(self) -> str:
            return "action_gva_MIA_vuelos"

        def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain):
            buttons = [
                {"title": "Oportunidad en marketing", "payload": "/gva_MIA_ventana_oportunidad"},
                {"title": "Influencia clim√°tica", "payload": "/gva_MIA_factor_climatico"}
            ]
            message = {
                "type": "button-carousel-template",
                "payload": {
                    "template_type": "generic",
                    "elements": [
                        {"buttons": group} for group in chunk_buttons(buttons, 3)
                    ]
                }
            }
            
            dispatcher.utter_message(text="Las **soluciones** ü§ñ de inteligencia artificial y anal√≠tica avanzada disponibles sobre **vuelos** te ayudar√°n a: \n\n ‚ñ´Ô∏è Aprovechar los tiempos del journey del viajero para **campa√±as de marketing**  \n ‚ñ´Ô∏è Comprender c√≥mo las **condiciones meteorol√≥gicas** repercuten sobre la movilidad a√©rea \n\n Selecciona la que quieras explorar:", attachment=message)
            return []
    


class ActionButtonsMIAPM(Action):
    def name(self) -> str:
        return "action_gva_MIA_presencia_movilidad"

    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain):
        buttons = [
            {"title": "Previsi√≥n de visitantes", "payload": "/gva_MIA_predict_estancia_diurna"},
            {"title": "Patrones de comportamiento", "payload": "/gva_MIA_patrones_comportamiento"},
        ]
        message = {
            "type": "button-carousel-template",
            "payload": {
                "template_type": "generic",
                "elements": [
                    {"buttons": group} for group in chunk_buttons(buttons, 3)
                ]
            }
        }
        
        dispatcher.utter_message(text="En relaci√≥n con la **presencia y la movilidad**, esta secci√≥n te permite üëÄ explorar: \n\n ‚ñ´Ô∏è El n√∫mero de **visitantes diarios** que se prev√©n, atendiendo a diversas variables  \n ‚ñ´Ô∏è Representaciones en **tres dimensiones** y **mapas de calor** que reflejan los **patrones** en el **comportamiento** tur√≠stico \n\n Haz clic en el **bot√≥n** que te interese para saber m√°s.", attachment=message)
        return []